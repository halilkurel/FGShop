


-Frontend katmanýna sað týk-> add -> client-side -> unpg -> microsoft/signalR  seçiyoruz ve browser dosyalarýný seçiyoruz.
-Api katmanýna Hubs klasörü oluþtur
-Ýçerisine SignalRHub clasý oluþtur.
-Api program.cs'e 

builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAll", policy =>
    {
        policy.AllowAnyOrigin()
              .AllowAnyHeader()
              .SetIsOriginAllowed((host) => true)
              .AllowCredentials()
              .AllowAnyMethod();

    });
});

builder.Services.AddSignalR();

ve altýnada     
app.UseCors("AllowAll");

app.MapHub<SignalRHub>("/signalrhub");

kodlarýný yazýyoruz.

            SignalR' baðlanabiliyor muyuz kontrol edeceðiz.

- UI katmanýnda controller'a SignalRDefault controller'ý oluþturalým 
- Index sayfasýný oluþturacaðýz . Fakat layout seçili olacak fakat layout seçmeyeceðiz

Index Sayfamýz : 


@{
    ViewData["Title"] = "Index2";
}

<h1>Index</h1>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<script src="~/js/site.js" asp-append-version="true"></script>
<script src="~/microsoft/signalr/dist/browser/signalr.min.js"></script>


<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <script type="text/javascript">
                        $(document).ready(() => {


                            var connection = new signalR.HubConnectionBuilder().withUrl("https://localhost:44325/SignalRHub").build();
                            $("#connstatus").text(connection.state);

                            connection.start().then(() => {
                                $("#connstatus").text(connection.state);
                                setInterval(() => {
                                    connection.invoke("SendCategoryCount");
                                }, 1000);    /* setInterval komutu belirlediðimiz zaman süresinde çalýþýr */

                            }).catch((err) => { console.log(err) });

                            connection.on("ReceiveCategoryCount", (value) => {
                                $("#categorycount").text(value);
                            });
                        });
                    </script>

                </div>
            </div>
        </div>
    </div>
</div>


<div class="row">
    <div class="col-md-8 offset-2">
        <div class="alert alert-success">Baðlantýnýn Durumu :<strong id="connstatus"></strong> </div>
        <div class="alert alert-success">Kategori Sayýsý :<strong id="categorycount"></strong> </div>
    </div>
</div> 


þeklinde olacak.

- Sonrasýnda Api deki Hub sýnýfýmýzdan istediðimiz veriyi yazýp çekeceðiz.
- Örnek Html sayfasý : 




<!-- Header Mobile -->

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<script src="~/js/site.js" asp-append-version="true"></script>
<script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>

<div class="wrap-header-mobile">

	<script type="text/javascript">
		$(document).ready(() => {
			var connection = new signalR.HubConnectionBuilder().withUrl("https://localhost:7171/SignalRHub").build();

			$("#connstatus").text(connection.state);

			connection.start().then(() => {
				$("#connstatus").text(connection.state);

				// UserId'yi HTML'den alýyoruz
				var userId = $("#basketCount").data("user-id");

				setInterval(() => {
					// SignalR üzerinden userId'yi gönderiyoruz
					connection.invoke("SendBasket", userId).catch(err => console.error(err.toString()));
				}, 1000); // Her 1 saniyede bir çaðrý yapar
			}).catch((err) => { console.log(err) });

			connection.on("ReceiveBasketCount", (value) => {
				$("#basketCount").attr("data-notify", value); // Data-notify deðerini günceller
			});
		});
	</script>




	<!-- Logo moblie -->
	<div class="logo-mobile">
		<a href="~/cozastore-master/index.html"><img src="~/cozastore-master/images/icons/logo-01.png" alt="IMG-LOGO"></a>
	</div>

	<!-- Icon header -->
	<div class="wrap-icon-header flex-w flex-r-m m-r-15">
		<div class="icon-header-item cl2 hov-cl1 trans-04 p-r-11 js-show-modal-search">
			<i class="zmdi zmdi-search"></i>
		</div>

		<div id="basketCount" data-user-id="@ViewBag.UserId" class="icon-header-item cl2 hov-cl1 trans-04 p-r-11 p-l-10 icon-header-noti js-show-cart" data-notify="0">
			<i class="zmdi zmdi-shopping-cart"></i>
		</div>

		<a href="#" class="dis-block icon-header-item cl2 hov-cl1 trans-04 p-r-11 p-l-10 icon-header-noti" data-notify="0">
			<i class="zmdi zmdi-favorite-outline"></i>
		</a>
	</div>

	<!-- Button show menu -->
	<div class="btn-show-menu-mobile hamburger hamburger--squeeze">
		<span class="hamburger-box">
			<span class="hamburger-inner"></span>
		</span>
	</div>
</div>

-Örnek HubsController:

using FGShop.BussinessLayer.EntityFremawork.EfOrder;
using Microsoft.AspNetCore.SignalR;

namespace FGShop.WebApiLayer.Hubs
{
    public class SignalRHub : Hub
    {
        private readonly IEFBasketService _ebasketService;

        public SignalRHub(IEFBasketService ebasketService)
        {
            _ebasketService = ebasketService;
        }

        public async Task SendBasket(int userId)
        {
            var basketCount = await _ebasketService.GetByUserIdBasketQuantity(userId);
            await Clients.All.SendAsync("ReceiveBasketCount", basketCount);
        }
    }
}
